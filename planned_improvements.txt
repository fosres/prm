NOTE: It is strongly recommended to run psync.o as the root-owner user of your computer to avoid conflicts with file permissions.

CHECK: 1. Ensure psync is smart enough to tell the difference between a file or directory and encrypt/decrypt accordingly. Just the edit the ensync file to directly check if the src pointer points to a file or directory.

2. Ensure that the password does not echo into stdout into the terminal as it is being typed. Remember, ask the user to retype the password to check that they have typed correctly. Use the termios library.

3. Ensure that psync is smart enough to only bother copying when there is either a date, time, or file size difference between the source and destination. This will save plenty of time during backing up and this is the basic strategy that rsync uses.

4. Extended attributes bug:

I attempted to backup my backup of my Gentoo Server's root directory that runs from a bootable USB stick. This is a simple 16GB bootable USB disk that I actually use as an SSH and private Git server where I store all my personal information. On my Thinkpad, the backup is found in the following directory:

/home/tsalim/Gentoo_Server_Backup/gentoo_server_backup-02-05-2019/

But during the backup process, the following error was printed:

/home/tsalim/Gentoo_Server_Backup/gentoo_server_backup-02-05-2019/usr/bin/crontab:Failed to get gid of destination file

There is a simple reason why this is happening:

 
-rwxr-s--x 1 root 249 52504 Jan 25 04:45 /home/tsalim/Gentoo_Server_Backup/gentoo_server_backup-02-05-2019/usr/bin/crontab

Did you see that 's' in the file permissions. This file has a setgid bit execute permissions. It also implies execute permissions for users that are part of the group 'root' other than the root owner. All I must do is edit the do_chown function to add support for the following execute permissions:

Execute permission (third character)	-	The file cannot be executed.	The directory cannot be accessed with cd.

'x'	The file can be executed.	The directory can be accessed with cd; this is the only permission bit that in practice can be considered to be "inherited" from the ancestor directories, in fact if any folder in the path does not have the x bit set, the final file or folder cannot be accessed either, regardless of its permissions; see path_resolution(7) for more information.

's'	The setuid bit when found in the user triad; the setgid bit when found in the group triad; it is not found in the others triad; it also implies that x is set.

'S'	Same as s, but x is not set; rare on regular files, and useless on folders.

't'	The sticky bit; it can only be found in the others triad; it also implies that x is set.

'T'	Same as t, but x is not set; rare on regular files, and useless on folders.

February 19, 2019 at 1:44:26 PM

I have decided to add support for distributed version control in prm. This means each and every user of a shared file or directory will be able to see a complete history of all the exact changes they have personally made to the file or directory. Each users' changes will only be visible to that user as it is a part of their personal work history. This idea is inspired directly off of git. The distributed version control is based on three different famous algorithms:

1. The rsync delta transfer algorithm

2. Git's changelog system

3. Btrfs's copy-on-write filsystem.

Each of these three algorithms have their own unique stregnths. 

1. Rsync's delta transfer algorithm became internationally famous for the efficiency at which it could transfer files across a weak internet connection. It is even more suitable than git itself for cloud storage of directories in your machine, regardless of the type of file being stored. This is something git lacks in. git was only designed to deal with simple, regular source code text files. When people attempt to use git as a cloud-storage provider, git often completely fails to even upload the entire directory. This may be since git actually tries to reference a complete copy of every single save-instance of every file in the directory.

2. Git's changelog system has something to teach us about distributed version control and determinging if a backup file must be edited. Git uses the SHA1 checksum to determine if two versions of a file are identical. In the prm project, the SHA512 checksum will be used to determine if two distinct versions of a 512-byte memory block in two distinct versions of a file are different. Git's distributed version control also made project collaboration much more efficient. Each and every contributor can work on their own version of the project in their local machine and upload code suggestions to a directory on the host server that was separate from the main directory where the project was hosted. From this separate directory.

3. Btrfs's copy-on-write filesystem is designed to automatically keep a changelog of every file's history within a directory. For instance, its Incremental Snapshot Transfer implies it can backup and restore even faster than rsync's delta transfer algorithm incremental snapshot transfer technique. To do this effectively, Btrfs's filesystem implements B-Tree data structures to quickly retrieve the write information.

Combining these three best qualities of each will make psync an incredibly efficient file transfer system.


On the Importance of Providing A Command Line Flag For Radix64 Encoding:

The following is the terminal output for an attempt to send an encrypted file directly through email:

--------------Begin terminal output--------------------

diff -r prm_bkup.c prm_bkup_protonmail.c 
Binary files prm_bkup.c and prm_bkup_protonmail.c differ
tsalim@thinkpad ~/g/prm> man diff
tsalim@thinkpad ~/g/prm> vim planned_improvements.txt
tsalim@thinkpad ~/g/prm> rsync -AXzarp  --info=progress2 -e 'ssh -p 50000' /home/tsalim/Rsync/ share@fosres.org:/home/share/Rsync/
         17,996   0%    4.24kB/s    0:00:04 (xfr#2, to-chk=0/3336)   
tsalim@thinkpad ~/g/prm> vim planned_improvements.txt
tsalim@thinkpad ~/g/prm> diff -ry prm_bkup.c prm_bkup_protonmail.c 
Binary files prm_bkup.c and prm_bkup_protonmail.c differ
tsalim@thinkpad ~/g/prm> man diff
tsalim@thinkpad ~/g/prm> wc -c prm_bkup.c
5933 prm_bkup.c
tsalim@thinkpad ~/g/prm> wc -c prm_bkup_protonmail.c 
8867 prm_bkup_protonmail.c
tsalim@thinkpad ~/g/prm> du -sh prm_bkup.c
8.0K    prm_bkup.c
tsalim@thinkpad ~/g/prm> du -sh prm_bkup_protonmail.c 
12K     prm_bkup_protonmail.c
tsalim@thinkpad ~/g/prm> ./psync.o --dsync prm_bkup_protonmail.c prm_restore_protonmail.c
Enter Password:
Reenter Password:
Decryption failed, printing empty file

--------------End terminal output--------------------

Keep in mind the following happened during this experiment:

ProtonMail actually supports UTF-8 Encoding. However, not all email protocols support UTF-8 encoding perfectly.
Email protocols like SMTP will expect raw email messages to be encoded in ASCII only. Anyways, despite obvious problems like this, ProtonMail accurately received the UTF-8 encoded encrypted email text that I made ProtonMail email to itself. But very serious problems began when I tried to copy the received UTF-8 encoded encrypted text to a local file in my systems SSD.

I first tried to use vim, which I always use for coding-related tasks. First, KDE, my desktop environment, warned me that unprintable characters were present in the file. When I clicked on the option to paste characters regardless, literally nothing was pasted. And I truly mean nothing. I eventually gave up on vim. This surprised me since people trust editors like vim to design kernel code. Of course, when it comes down to programming, it is crucial that all data is maintained in the code, in the code's output, and in the data it is supposed to read from. But to be fair, this is the reason why kernel developers demand other kernel developers to send code using a terminal-based mail-transfer agent (e.g. mutt). 

Anyways, I next tried KWrite. It at first seemed to paste everything perfectly. But when I applied the "diff -r" command between the original encrypted file "prm_bkup.c" and the file pasted to KWrite, "prm_bkup_protonmail.c", the command obviously outputted that the two binary files differed.

As you can see in the terminal output, when I compared the sizes of the two files, the "prm_bkup_protonmail.c" was several thousands of bytes larger than the original encrypted file. 

I had to actually use my own hexdump, tscd (https://github.com/fosres/tscd), to figure out why. After applying the hexdump to both files, I applied the following command to both hexdump output files:

diff -u prm_bkup.c.dump.txt prm_bkup_protonmail.c.dump.txt > diff_prm_bkup.c.dump.txt_vs_prm_bkup_protonmail.c.dump.txt

I finally realized why there was such a major difference in size. 

When I pasted the UTF-8 text from ProtonMail to KWrite, a bunch of 0xc2 and 0xc3 bytes were spread out throughout "prm_bkup_protonmail.c" file. Literally, almost every other original byte from "prm_bkup.c" is almost always often followed by a random 0xc2 byte and rarely a 0xc3 byte. Here is copy and paste of the results:

The following is based on a hexdump output of "prm_bkup.c" after the diff command was applied to the hexdump output file. The output is based on the hexdump output file "prm_bkup.c.dump.txt":

@@ -1,371 +1,555 @@
-00000000:  b7 b6 7f 20 80 3a d3 cf 63 e6 1f 74 e9 d9 8e a3  ··· ·:··c··t····
-00000010:  34 8c 95 3d 93 fa a8 3a f8 ac 9d 0f 11 1f 3e 5e  4··=···:······>^
-00000020:  fe ce bf 78 57 a6 f7 d7 5e e1 c9 72 80 a7 81 54  ···xW···^··r···T
-00000030:  2d d2 37 52 db d8 e8 10 ee 6c dd 8b 4d 5a 31 05  -·7R·····l··MZ1·
-00000040:  0c 46 4f a3 79 e2 8b 96 2f e8 d3 03 37 e1 83 7c  ·FO·y···/···7··|
-00000050:  b5 0d 35 49 a5 9b 0a 6b 0d 4d 8b 97 4f 43 15 fb  ··5I···k·M··OC··

The following is based on a hexdump output of "prm_bkup_protonmail.c" after the diff command was applied to the hexdump output file. The output is based on the hexdump output file "prm_bkup_protonmail.c.dump.txt":

+00000000:  c2 b7 c2 b6 7f 20 c2 80 3a c3 93 c3 8f 63 c3 a6  ····· ··:····c··
+00000010:  1f 74 c3 a9 c3 99 c2 8e c2 a3 34 c2 8c c2 95 3d  ·t········4····=
+00000020:  c2 93 c3 ba c2 a8 3a c3 b8 c2 ac c2 9d 0f 11 1f  ······:·········
+00000030:  3e 5e c3 be c3 8e c2 bf 78 57 c2 a6 c3 b7 c3 97  >^······xW······
+00000040:  5e c3 a1 c3 89 72 c2 80 c2 a7 c2 81 54 2d c3 92  ^····r······T-··
+00000050:  37 52 c3 9b c3 98 c3 a8 10 c3 ae 6c c3 9d c2 8b  7R·········l····

You can easily spot those 0xc2 and 0xc3 bytes that were not in the original hexdump. The hexdump output files mentioned in this section are now a part of this git repository for your reference.
